{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      name: \"transcribe\",\n      language: \"\",\n      isShow: false,\n      list: []\n    };\n  },\n  methods: {\n    confirmFun() {\n      let selectedValue;\n      const radioButtonGroup = document.getElementsByName(\"selectModel\");\n      for (let i = 0; i < radioButtonGroup.length; i++) {\n        if (radioButtonGroup[i].checked) {\n          selectedValue = radioButtonGroup[i].value;\n          break; // 找到被选中的单选按钮后，跳出循环\n        }\n      }\n\n      console.log(selectedValue);\n      const newList = this.list.find(item => item.name === selectedValue);\n      //  console.log(newList)\n\n      this.$store.commit('setModel', {\n        engineName: newList.engine_name,\n        modelName: newList.name,\n        dataSetName: newList.dataset_name,\n        pronDictMapName: newList.pron_dict_name\n      });\n      console.log(this.$store.state);\n    }\n  },\n  created() {\n    this.isShow = true;\n    axios({\n      url: 'http://localhost:8091/list/models'\n    }).then(result => {\n      this.list = JSON.parse(result.data.data).data.list;\n      console.log(this.list);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n};","map":{"version":3,"names":["axios","data","name","language","isShow","list","methods","confirmFun","selectedValue","radioButtonGroup","document","getElementsByName","i","length","checked","value","console","log","newList","find","item","$store","commit","engineName","engine_name","modelName","dataSetName","dataset_name","pronDictMapName","pron_dict_name","state","created","url","then","result","JSON","parse","catch","err"],"sources":["src/views/Transcribe.vue"],"sourcesContent":["<template>\n    <div class=\"transcribe\">\n\n        <div id=\"transcribeTipDiv\">\n            <img id=\"transcribeTipLogo\" src=\"@/assets/tipLogo.png\" alt=\"Logo\"/>&nbsp;&nbsp;\n            Please select a training type according to the file format to train the model.\n        </div>\n\n        <div id=\"transcribeButtonDiv\" class=\"button-container\">\n            <div class=\"language-input\">\n\n            </div>\n        </div>\n\n        <div v-show=\"isShow\" id=\"modelInfoTable\">\n            <table class=\"model-table\">\n                <thead>\n                <tr id=\"tableHead\">\n                    <th>ID</th>\n                    <th>Model Name</th>\n                    <th>Model type</th>\n                    <th>DataSet Name</th>\n                    <th>Status</th>\n                    <th>View</th>\n                    <th>Selection</th>\n                </tr>\n                </thead>\n                <tbody>\n                <!-- insert table and data -->\n                <tr v-for=\"(item,index) in list\" :key=\"index+1\">\n                    <td>{{index+1}}</td>\n                    <td>{{item.name}}</td>\n                    <td>{{item.engine_name}}</td>\n                    <td>{{item.dataset_name}}</td>\n                    <td>{{item.status}}</td>\n                    <td>\n                        <router-link to=\"/details\">\n                            <el-button type=\"primary\">Details</el-button>\n                        </router-link>\n                    </td>\n                    <td><input type=\"radio\" name=\"selectModel\" v-bind:value=\"item.name\" /></td>\n                </tr>\n                </tbody>\n            </table>\n            <router-link to=\"/upload\">\n            <button class=\"confirmButton\" @click=\"confirmFun\">Confirm</button>\n            </router-link>\n        </div>\n    </div>\n</template>\n\n<script>\n    import axios from \"axios\";\n\n    export default {\n        data() {\n            return {\n                name: \"transcribe\",\n                language: \"\",\n                isShow: false,\n                list: [\n\n                ]\n            };\n        },\n        methods: {\n            confirmFun() {\n                let selectedValue;\n                const radioButtonGroup = document.getElementsByName(\"selectModel\");\n                for (let i = 0; i < radioButtonGroup.length; i++) {\n                    if (radioButtonGroup[i].checked) {\n                        selectedValue = radioButtonGroup[i].value;\n                        break; // 找到被选中的单选按钮后，跳出循环\n                    }\n                }\n                console.log(selectedValue)\n\n                const newList = this.list.find(item => item.name === selectedValue)\n              //  console.log(newList)\n\n                this.$store.commit('setModel',{\n                    engineName:newList.engine_name,\n                    modelName:newList.name,\n                    dataSetName:newList.dataset_name,\n                    pronDictMapName:newList.pron_dict_name\n                })\n\n                 console.log(this.$store.state)\n            }\n        },\n        created() {\n            this.isShow = true\n            axios({\n                url: 'http://localhost:8091/list/models',\n            }).then(result => {\n                this.list = JSON.parse(result.data.data).data.list\n                console.log(this.list)\n\n            }).catch(err => {\n                console.log(err)\n            })\n        }\n    }\n</script>\n\n<style scoped>\n    .transcribe {\n        background-color: #f5f5f5;\n        padding: 20px;\n        border-radius: 10px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        text-align: center;\n        height: 80vh;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n    }\n\n    #transcribeTipLogo {\n        width: 50px;\n        height: 50px;\n        margin-right: 10px;\n        vertical-align: middle;\n    }\n\n    #transcribeTipDiv {\n        margin-bottom: 20px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    p {\n        font-size: 18px;\n        color: #333;\n        margin: 10px;\n    }\n\n    .button-container {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex-wrap: wrap;\n    }\n\n    .language-input {\n        display: flex;\n        align-items: center;\n        margin-bottom: 10px;\n        width: 400px;\n    }\n\n    .language-input-box {\n        flex-grow: 1;\n        padding: 10px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        font-size: 16px;\n        margin-right: 10px;\n    }\n\n    .confirmButton {\n        background-color: #007bff;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 10px 20px;\n        cursor: pointer;\n        font-size: 16px;\n        position: relative;\n        margin: 10px;\n        margin-left: 600px;\n    }\n\n    .confirmButton:hover {\n        background-color: #0056b3;\n    }\n\n    .model-table {\n        width: 100%;\n        border-collapse: collapse;\n        text-align: center;\n    }\n\n    #tableHead th {\n        background-color: #007bff;\n        color: white;\n        text-align: center;\n        padding: 10px;\n    }\n\n    .model-table th,\n    .model-table td {\n        border: 1px solid #ccc;\n        padding: 10px;\n    }\n\n    #modelInfoTable {\n        margin-top: 20px;\n    }\n</style>"],"mappings":"AAoDA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;MACAC,QAAA;MACAC,MAAA;MACAC,IAAA;IAGA;EACA;EACAC,OAAA;IACAC,WAAA;MACA,IAAAC,aAAA;MACA,MAAAC,gBAAA,GAAAC,QAAA,CAAAC,iBAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,GAAAH,gBAAA,CAAAI,MAAA,EAAAD,CAAA;QACA,IAAAH,gBAAA,CAAAG,CAAA,EAAAE,OAAA;UACAN,aAAA,GAAAC,gBAAA,CAAAG,CAAA,EAAAG,KAAA;UACA;QACA;MACA;;MACAC,OAAA,CAAAC,GAAA,CAAAT,aAAA;MAEA,MAAAU,OAAA,QAAAb,IAAA,CAAAc,IAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAlB,IAAA,KAAAM,aAAA;MACA;;MAEA,KAAAa,MAAA,CAAAC,MAAA;QACAC,UAAA,EAAAL,OAAA,CAAAM,WAAA;QACAC,SAAA,EAAAP,OAAA,CAAAhB,IAAA;QACAwB,WAAA,EAAAR,OAAA,CAAAS,YAAA;QACAC,eAAA,EAAAV,OAAA,CAAAW;MACA;MAEAb,OAAA,CAAAC,GAAA,MAAAI,MAAA,CAAAS,KAAA;IACA;EACA;EACAC,QAAA;IACA,KAAA3B,MAAA;IACAJ,KAAA;MACAgC,GAAA;IACA,GAAAC,IAAA,CAAAC,MAAA;MACA,KAAA7B,IAAA,GAAA8B,IAAA,CAAAC,KAAA,CAAAF,MAAA,CAAAjC,IAAA,CAAAA,IAAA,EAAAA,IAAA,CAAAI,IAAA;MACAW,OAAA,CAAAC,GAAA,MAAAZ,IAAA;IAEA,GAAAgC,KAAA,CAAAC,GAAA;MACAtB,OAAA,CAAAC,GAAA,CAAAqB,GAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}