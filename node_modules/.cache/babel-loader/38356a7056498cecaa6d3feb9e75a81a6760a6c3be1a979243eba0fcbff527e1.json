{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      name: \"transcribe\",\n      language: \"\",\n      list: [],\n      isLoading: true\n    };\n  },\n  methods: {\n    confirmDetailFun(obj) {\n      console.log(obj);\n      this.$store.commit('setDetail', {\n        modelName: obj.name,\n        dataSetName: obj.dataset_name,\n        engineName: obj.engine_name,\n        pronDictName: obj.pron_dict_name,\n        status: obj.status\n      });\n      // console.log(this.$store.state)\n    },\n\n    confirmFun() {\n      let selectedValue;\n      const radioButtonGroup = document.getElementsByName(\"selectModel\");\n      for (let i = 0; i < radioButtonGroup.length; i++) {\n        if (radioButtonGroup[i].checked) {\n          selectedValue = radioButtonGroup[i].value;\n          break;\n        }\n      }\n      // console.log(\"model name :\" + selectedValue)\n\n      const newList = this.list.find(item => item.name === selectedValue);\n      this.$store.commit('setModel', {\n        engineName: newList.engine_name,\n        modelName: newList.name,\n        dataSetName: newList.dataset_name,\n        pronDictMapName: newList.pron_dict_name\n      });\n\n      // console.log(this.$store.state.model.engineName)\n      // console.log(\"Prepare to send info to back end\")\n\n      if (this.$store.state.model.engineName == \"hft\") {\n        console.log(\"Send hft model type\");\n        axios({\n          url: 'http://localhost:8091/hft/set/model/',\n          method: 'POST',\n          data: this.$store.state.model\n        }).then(result => {\n          console.log(result);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else if (this.$store.state.model.engineName == \"kaldi\") {\n        console.log(\"Send kaldi model type\");\n        axios({\n          url: 'http://localhost:8091/kaldi/set/model/',\n          method: 'POST',\n          data: this.$store.state.model\n        }).then(result => {\n          console.log(result);\n        }).catch(err => {\n          console.log(err);\n        });\n      } else {\n        console.log(\"Fail to send model information!\");\n      }\n    }\n  },\n  async created() {\n    await axios({\n      url: 'http://localhost:8091/list/models'\n    }).then(result => {\n      this.list = JSON.parse(result.data.data).data.list;\n      console.log(this.list);\n    }).catch(err => {\n      console.log(err);\n    });\n  },\n  directives: {\n    loading: {\n      inserted(el, binding) {\n        binding.value ? el.classList.add('loading') : el.classList.remove('loading');\n      },\n      update(el, binding) {\n        binding.value ? el.classList.add('loading') : el.classList.remove('loading');\n      }\n    }\n  }\n};","map":{"version":3,"names":["axios","data","name","language","list","isLoading","methods","confirmDetailFun","obj","console","log","$store","commit","modelName","dataSetName","dataset_name","engineName","engine_name","pronDictName","pron_dict_name","status","confirmFun","selectedValue","radioButtonGroup","document","getElementsByName","i","length","checked","value","newList","find","item","pronDictMapName","state","model","url","method","then","result","catch","err","created","JSON","parse","directives","loading","inserted","el","binding","classList","add","remove","update"],"sources":["src/views/Transcribe.vue"],"sourcesContent":["<template>\n    <div class=\"transcribe\">\n\n        <div id=\"transcribeTipDiv\">\n            <img id=\"transcribeTipLogo\" src=\"@/assets/tipLogo.png\" alt=\"Logo\"/>&nbsp;&nbsp;\n            Please select a training type according to the file format to train the model.\n        </div>\n\n        <div id=\"transcribeButtonDiv\" class=\"button-container\">\n            <div class=\"language-input\">\n\n            </div>\n        </div>\n\n        <div class=\"modelInfoTable\" v-loading=\"isLoading\">\n            <table class=\"model-table\">\n                <thead>\n                <tr id=\"tableHead\">\n                    <th>ID</th>\n                    <th>Model Name</th>\n                    <th>Model type</th>\n                    <th>DataSet Name</th>\n                    <th>Status</th>\n                    <th>View</th>\n                    <th>Selection</th>\n                </tr>\n                </thead>\n                <tbody>\n                <!-- insert table and data -->\n                <tr v-for=\"(item,index) in list\" :key=\"index+1\">\n                    <td>{{index+1}}</td>\n                    <td>{{item.name}}</td>\n                    <td>{{item.engine_name}}</td>\n                    <td>{{item.dataset_name}}</td>\n                    <td>{{item.status}}</td>\n                    <td>\n                        <router-link to=\"/details\">\n                            <button class=\"detailButton\" @click=\"confirmDetailFun(item)\" :value=\"item.name\">Details\n                            </button>\n                        </router-link>\n                    </td>\n                    <td><input type=\"radio\" name=\"selectModel\" v-bind:value=\"item.name\"/></td>\n                </tr>\n                </tbody>\n            </table>\n            <router-link to=\"/upload\">\n                <button class=\"confirmButton\" @click=\"confirmFun()\">Confirm</button>\n            </router-link>\n        </div>\n    </div>\n</template>\n\n<script>\n    import axios from \"axios\";\n\n    export default {\n        data() {\n            return {\n                name: \"transcribe\",\n                language: \"\",\n                list: [],\n                isLoading: true\n            };\n        },\n        methods: {\n            confirmDetailFun(obj) {\n                console.log(obj)\n                this.$store.commit('setDetail', {\n                    modelName: obj.name,\n                    dataSetName: obj.dataset_name,\n                    engineName: obj.engine_name,\n                    pronDictName: obj.pron_dict_name,\n                    status: obj.status\n                })\n                // console.log(this.$store.state)\n            },\n            confirmFun() {\n                let selectedValue;\n                const radioButtonGroup = document.getElementsByName(\"selectModel\");\n                for (let i = 0; i < radioButtonGroup.length; i++) {\n                    if (radioButtonGroup[i].checked) {\n                        selectedValue = radioButtonGroup[i].value;\n                        break;\n                    }\n                }\n                // console.log(\"model name :\" + selectedValue)\n\n                const newList = this.list.find(item => item.name === selectedValue)\n\n                this.$store.commit('setModel', {\n                    engineName: newList.engine_name,\n                    modelName: newList.name,\n                    dataSetName: newList.dataset_name,\n                    pronDictMapName: newList.pron_dict_name\n                })\n\n                // console.log(this.$store.state.model.engineName)\n                // console.log(\"Prepare to send info to back end\")\n\n                if (this.$store.state.model.engineName == \"hft\") {\n                    console.log(\"Send hft model type\")\n                    axios({\n                        url: 'http://localhost:8091/hft/set/model/',\n                        method: 'POST',\n                        data: this.$store.state.model\n\n                    }).then(result => {\n                        console.log(result)\n                    }).catch(err => {\n                        console.log(err)\n                    })\n                } else if (this.$store.state.model.engineName == \"kaldi\") {\n                    console.log(\"Send kaldi model type\")\n                    axios({\n                        url: 'http://localhost:8091/kaldi/set/model/',\n                        method: 'POST',\n                        data: this.$store.state.model\n\n                    }).then(result => {\n                        console.log(result)\n                    }).catch(err => {\n                        console.log(err)\n                    })\n                } else {\n                    console.log(\"Fail to send model information!\")\n                }\n\n\n            }\n        },\n       async created() {\n\n           await axios({\n                url: 'http://localhost:8091/list/models',\n            }).then(result => {\n                this.list = JSON.parse(result.data.data).data.list\n                console.log(this.list)\n\n            }).catch(err => {\n                console.log(err)\n            })\n\n\n        },\n        directives: {\n            loading: {\n                inserted (el, binding) {\n                    binding.value ? el.classList.add('loading') : el.classList.remove('loading')\n                },\n                update (el, binding) {\n                    binding.value ? el.classList.add('loading') : el.classList.remove('loading')\n                }\n            }\n        }\n    }\n</script>\n\n<style scoped>\n    .transcribe {\n        background-color: #f5f5f5;\n        padding: 20px;\n        border-radius: 10px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        text-align: center;\n        height: 80vh;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n    }\n\n    #transcribeTipLogo {\n        width: 50px;\n        height: 50px;\n        margin-right: 10px;\n        vertical-align: middle;\n    }\n\n    #transcribeTipDiv {\n        margin-bottom: 20px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    p {\n        font-size: 18px;\n        color: #333;\n        margin: 10px;\n    }\n\n    .button-container {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex-wrap: wrap;\n    }\n\n    .language-input {\n        display: flex;\n        align-items: center;\n        margin-bottom: 10px;\n        width: 400px;\n    }\n\n    .language-input-box {\n        flex-grow: 1;\n        padding: 10px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        font-size: 16px;\n        margin-right: 10px;\n    }\n\n    .confirmButton {\n        background-color: #007bff;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 10px 20px;\n        cursor: pointer;\n        font-size: 16px;\n        position: relative;\n        margin: 10px;\n        margin-left: 600px;\n    }\n\n    .confirmButton:hover {\n        background-color: #0056b3;\n    }\n\n    .detailButton {\n        background-color: #007bff;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 5px 10px;\n        cursor: pointer;\n        font-size: 12px;\n        position: relative;\n        margin: 2px;\n\n    }\n\n    .detailButton:hover {\n        background-color: #0056b3;\n    }\n\n    .model-table {\n        width: 100%;\n        border-collapse: collapse;\n        text-align: center;\n    }\n\n    #tableHead th {\n        background-color: #007bff;\n        color: white;\n        text-align: center;\n        padding: 10px;\n    }\n\n    .model-table th,\n    .model-table td {\n        border: 1px solid #ccc;\n        padding: 10px;\n    }\n\n    .modelInfoTable {\n        margin-top: 20px;\n    }\n\n    .loading:before {\n        content: '';\n        position: absolute;\n        left: 30%;\n        top: 34%;\n        width: 55%;\n        height: 37%;\n        background: #fff url('../assets/loading.gif') no-repeat center;\n    }\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}