{"ast":null,"code":"import Request from \"@/utils/request\";\nexport default {\n  name: \"Upload\",\n  data() {\n    return {\n      fileList: []\n    };\n  },\n  methods: {\n    submitUpload() {\n      const formData = new FormData();\n\n      // Append each file from fileList to the formData\n      this.fileList.forEach(file => {\n        formData.append('files', file.raw); // 'files' is the field name. Adjust based on backend requirements.\n      });\n\n      const options = {\n        url: '/upload',\n        method: 'post',\n        data: {\n          model: this.$store.state.model,\n          file: formData\n        },\n        transformRequest: [function (data, headers) {\n          // Remove the default 'Content-Type' for post requests\n          delete headers['Content-Type'];\n          return data;\n        }]\n      };\n\n      // Send the request using your custom request object\n      Request(options).then(res => {\n        if (res.code === '0') {\n          // Ensure you navigate correctly through the response object\n          this.$message({\n            message: 'Upload success!',\n            type: 'success'\n          });\n          // Optionally, clear the fileList if needed: this.fileList = [];\n        } else {\n          this.$message({\n            message: res.msg,\n            type: 'error'\n          });\n        }\n      }).catch(error => {\n        console.log('Upload error:', error); // for debug\n        this.$message({\n          message: 'Upload failed: ' + error,\n          type: 'error'\n        });\n      });\n    },\n    handleRemove(file, fileList) {\n      console.log(file, fileList);\n    },\n    handlePreview(file) {\n      console.log(file);\n    },\n    handleChange(file, fileList) {\n      this.fileList = [...fileList];\n    }\n  }\n};","map":{"version":3,"names":["Request","name","data","fileList","methods","submitUpload","formData","FormData","forEach","file","append","raw","options","url","method","model","$store","state","transformRequest","headers","then","res","code","$message","message","type","msg","catch","error","console","log","handleRemove","handlePreview","handleChange"],"sources":["src/views/Upload.vue"],"sourcesContent":["<template>\n    <el-upload\n            class=\"upload-demo\"\n            ref=\"upload\"\n            action=\"https://localhost:8091\"\n            :on-preview=\"handlePreview\"\n            :on-remove=\"handleRemove\"\n            :on-change=\"handleChange\"\n            :file-list=\"fileList\"\n            :auto-upload=\"false\">\n        <el-button slot=\"trigger\" size=\"small\" type=\"primary\">Select file</el-button>\n        <el-button style=\"margin-left: 10px;\" size=\"small\" type=\"success\" @click=\"submitUpload\">upload to server\n        </el-button>\n    </el-upload>\n</template>\n\n<style>\n    .container {\n        position: relative;\n        display: flex;\n        flex-direction: column;\n    }\n\n    .button1 {\n        position: relative;\n        left: 25px;\n    }\n\n    .box1, .box2 {\n        padding: 10px;\n    / / border: 1 px solid #000;\n        margin: 10px;\n    }\n</style>\n\n<script>\n    import Request from \"@/utils/request\";\n\n    export default {\n        name: \"Upload\",\n        data() {\n            return {\n                fileList: []\n            }\n        },\n        methods: {\n            submitUpload() {\n                const formData = new FormData();\n\n                // Append each file from fileList to the formData\n                this.fileList.forEach(file => {\n                    formData.append('files', file.raw);  // 'files' is the field name. Adjust based on backend requirements.\n\n                });\n\n                const options = {\n                    url: '/upload',\n                    method: 'post',\n                    data: {\n                        model: this.$store.state.model,\n                        file: formData\n                    },\n                    transformRequest: [function (data, headers) {\n                        // Remove the default 'Content-Type' for post requests\n                        delete headers['Content-Type'];\n                        return data;\n                    }]\n                };\n\n                // Send the request using your custom request object\n                Request(options)\n                    .then(res => {\n                        if (res.code === '0') {  // Ensure you navigate correctly through the response object\n                            this.$message({message: 'Upload success!', type: 'success'});\n                            // Optionally, clear the fileList if needed: this.fileList = [];\n                        } else {\n                            this.$message({message: res.msg, type: 'error'});\n                        }\n                    })\n                    .catch(error => {\n                        console.log('Upload error:', error); // for debug\n                        this.$message({message: 'Upload failed: ' + error, type: 'error'});\n                    });\n\n\n            }\n            ,\n            handleRemove(file, fileList) {\n                console.log(file, fileList);\n            },\n            handlePreview(file) {\n                console.log(file);\n            },\n            handleChange(file, fileList) {\n                this.fileList = [...fileList];\n            }\n        }\n    }\n</script>"],"mappings":"AAoCA,OAAAA,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,QAAA;IACA;EACA;EACAC,OAAA;IACAC,aAAA;MACA,MAAAC,QAAA,OAAAC,QAAA;;MAEA;MACA,KAAAJ,QAAA,CAAAK,OAAA,CAAAC,IAAA;QACAH,QAAA,CAAAI,MAAA,UAAAD,IAAA,CAAAE,GAAA;MAEA;;MAEA,MAAAC,OAAA;QACAC,GAAA;QACAC,MAAA;QACAZ,IAAA;UACAa,KAAA,OAAAC,MAAA,CAAAC,KAAA,CAAAF,KAAA;UACAN,IAAA,EAAAH;QACA;QACAY,gBAAA,aAAAhB,IAAA,EAAAiB,OAAA;UACA;UACA,OAAAA,OAAA;UACA,OAAAjB,IAAA;QACA;MACA;;MAEA;MACAF,OAAA,CAAAY,OAAA,EACAQ,IAAA,CAAAC,GAAA;QACA,IAAAA,GAAA,CAAAC,IAAA;UAAA;UACA,KAAAC,QAAA;YAAAC,OAAA;YAAAC,IAAA;UAAA;UACA;QACA;UACA,KAAAF,QAAA;YAAAC,OAAA,EAAAH,GAAA,CAAAK,GAAA;YAAAD,IAAA;UAAA;QACA;MACA,GACAE,KAAA,CAAAC,KAAA;QACAC,OAAA,CAAAC,GAAA,kBAAAF,KAAA;QACA,KAAAL,QAAA;UAAAC,OAAA,sBAAAI,KAAA;UAAAH,IAAA;QAAA;MACA;IAGA;IAEAM,aAAAtB,IAAA,EAAAN,QAAA;MACA0B,OAAA,CAAAC,GAAA,CAAArB,IAAA,EAAAN,QAAA;IACA;IACA6B,cAAAvB,IAAA;MACAoB,OAAA,CAAAC,GAAA,CAAArB,IAAA;IACA;IACAwB,aAAAxB,IAAA,EAAAN,QAAA;MACA,KAAAA,QAAA,OAAAA,QAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}