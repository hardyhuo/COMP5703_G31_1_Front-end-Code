{"ast":null,"code":"import axios from \"axios\";\nexport default {\n  data() {\n    return {\n      name: \"transcribe\",\n      language: \"\",\n      list: []\n    };\n  },\n  methods: {\n    confirmDetailFun() {\n      /*  let detailValue;\n        const detailButtonGroup = document.getElementsByName(\"detailButton\");\n        for (let i = 0; i < detailButtonGroup.length; i++) {\n            if (detailButtonGroup[i].checked) {\n                detailValue = detailButtonGroup[i].value;\n                break;\n            }\n        }\n         console.log(\"model name :\" + detailValue)*/\n    },\n    confirmFun() {\n      let selectedValue;\n      const radioButtonGroup = document.getElementsByName(\"selectModel\");\n      for (let i = 0; i < radioButtonGroup.length; i++) {\n        if (radioButtonGroup[i].checked) {\n          selectedValue = radioButtonGroup[i].value;\n          break;\n        }\n      }\n      // console.log(\"model name :\" + selectedValue)\n\n      const newList = this.list.find(item => item.name === selectedValue);\n      console.log(newList);\n      this.$store.commit('setModel', {\n        engineName: newList.engine_name,\n        modelName: newList.name,\n        dataSetName: newList.dataset_name,\n        pronDictMapName: newList.pron_dict_name\n      });\n      console.log(this.$store.state);\n      axios({\n        url: 'http://localhost:8091/hft/set/model/',\n        method: 'POST',\n        data: this.$store.state.model\n      }).then(result => {\n        console.log(result);\n      }).catch(err => {\n        console.log(err);\n      });\n    }\n  },\n  created() {\n    axios({\n      url: 'http://localhost:8091/list/models'\n    }).then(result => {\n      this.list = JSON.parse(result.data.data).data.list;\n      console.log(this.list);\n    }).catch(err => {\n      console.log(err);\n    });\n  }\n};","map":{"version":3,"names":["axios","data","name","language","list","methods","confirmDetailFun","confirmFun","selectedValue","radioButtonGroup","document","getElementsByName","i","length","checked","value","newList","find","item","console","log","$store","commit","engineName","engine_name","modelName","dataSetName","dataset_name","pronDictMapName","pron_dict_name","state","url","method","model","then","result","catch","err","created","JSON","parse"],"sources":["src/views/Transcribe.vue"],"sourcesContent":["<template>\n    <div class=\"transcribe\">\n\n        <div id=\"transcribeTipDiv\">\n            <img id=\"transcribeTipLogo\" src=\"@/assets/tipLogo.png\" alt=\"Logo\"/>&nbsp;&nbsp;\n            Please select a training type according to the file format to train the model.\n        </div>\n\n        <div id=\"transcribeButtonDiv\" class=\"button-container\">\n            <div class=\"language-input\">\n\n            </div>\n        </div>\n\n        <div id=\"modelInfoTable\">\n            <table class=\"model-table\">\n                <thead>\n                <tr id=\"tableHead\">\n                    <th>ID</th>\n                    <th>Model Name</th>\n                    <th>Model type</th>\n                    <th>DataSet Name</th>\n                    <th>Status</th>\n                    <th>View</th>\n                    <th>Selection</th>\n                </tr>\n                </thead>\n                <tbody>\n                <!-- insert table and data -->\n                <tr v-for=\"(item,index) in list\" :key=\"index+1\">\n                    <td>{{index+1}}</td>\n                    <td>{{item.name}}</td>\n                    <td>{{item.engine_name}}</td>\n                    <td>{{item.dataset_name}}</td>\n                    <td>{{item.status}}</td>\n                    <td>\n                        <router-link to=\"/details\">\n                            <button name=\"detailButton\" @click=\"confirmDetailFun\" v-bind:value=\"item.name\">Details</button>\n                        </router-link>\n                    </td>\n                    <td><input type=\"radio\" name=\"selectModel\" v-bind:value=\"item.name\"/></td>\n                </tr>\n                </tbody>\n            </table>\n            <router-link to=\"/upload\">\n                <button class=\"confirmButton\" @click=\"confirmFun\">Confirm</button>\n            </router-link>\n        </div>\n    </div>\n</template>\n\n<script>\n    import axios from \"axios\";\n\n    export default {\n        data() {\n            return {\n                name: \"transcribe\",\n                language: \"\",\n                list: []\n            };\n        },\n        methods: {\n            confirmDetailFun(){\n              /*  let detailValue;\n                const detailButtonGroup = document.getElementsByName(\"detailButton\");\n                for (let i = 0; i < detailButtonGroup.length; i++) {\n                    if (detailButtonGroup[i].checked) {\n                        detailValue = detailButtonGroup[i].value;\n                        break;\n                    }\n                }\n                 console.log(\"model name :\" + detailValue)*/\n            },\n            confirmFun() {\n                let selectedValue;\n                const radioButtonGroup = document.getElementsByName(\"selectModel\");\n                for (let i = 0; i < radioButtonGroup.length; i++) {\n                    if (radioButtonGroup[i].checked) {\n                        selectedValue = radioButtonGroup[i].value;\n                        break;\n                    }\n                }\n                // console.log(\"model name :\" + selectedValue)\n\n                const newList = this.list.find(item => item.name === selectedValue)\n                console.log(newList)\n\n                this.$store.commit('setModel', {\n                    engineName: newList.engine_name,\n                    modelName: newList.name,\n                    dataSetName: newList.dataset_name,\n                    pronDictMapName: newList.pron_dict_name\n                })\n\n                console.log(this.$store.state)\n\n\n                axios({\n                    url: 'http://localhost:8091/hft/set/model/',\n                    method: 'POST',\n                    data: this.$store.state.model\n\n                }).then(result => {\n                    console.log(result)\n                }).catch(err => {\n                    console.log(err)\n                })\n\n\n            }\n        },\n        created() {\n\n            axios({\n                url: 'http://localhost:8091/list/models',\n            }).then(result => {\n                this.list = JSON.parse(result.data.data).data.list\n                console.log(this.list)\n\n            }).catch(err => {\n                console.log(err)\n            })\n        }\n    }\n</script>\n\n<style scoped>\n    .transcribe {\n        background-color: #f5f5f5;\n        padding: 20px;\n        border-radius: 10px;\n        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);\n        text-align: center;\n        height: 80vh;\n        display: flex;\n        flex-direction: column;\n        justify-content: center;\n        align-items: center;\n    }\n\n    #transcribeTipLogo {\n        width: 50px;\n        height: 50px;\n        margin-right: 10px;\n        vertical-align: middle;\n    }\n\n    #transcribeTipDiv {\n        margin-bottom: 20px;\n        display: flex;\n        justify-content: center;\n        align-items: center;\n    }\n\n    p {\n        font-size: 18px;\n        color: #333;\n        margin: 10px;\n    }\n\n    .button-container {\n        display: flex;\n        align-items: center;\n        justify-content: space-between;\n        flex-wrap: wrap;\n    }\n\n    .language-input {\n        display: flex;\n        align-items: center;\n        margin-bottom: 10px;\n        width: 400px;\n    }\n\n    .language-input-box {\n        flex-grow: 1;\n        padding: 10px;\n        border: 1px solid #ccc;\n        border-radius: 5px;\n        font-size: 16px;\n        margin-right: 10px;\n    }\n\n    .confirmButton {\n        background-color: #007bff;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 10px 20px;\n        cursor: pointer;\n        font-size: 16px;\n        position: relative;\n        margin: 10px;\n        margin-left: 600px;\n    }\n\n    .confirmButton:hover {\n        background-color: #0056b3;\n    }\n\n    .detailButton {\n        background-color: #007bff;\n        color: white;\n        border: none;\n        border-radius: 5px;\n        padding: 5px 10px;\n        cursor: pointer;\n        font-size: 12px;\n        position: relative;\n        margin: 2px;\n\n    }\n\n    .detailButton:hover {\n        background-color: #0056b3;\n    }\n\n    .model-table {\n        width: 100%;\n        border-collapse: collapse;\n        text-align: center;\n    }\n\n    #tableHead th {\n        background-color: #007bff;\n        color: white;\n        text-align: center;\n        padding: 10px;\n    }\n\n    .model-table th,\n    .model-table td {\n        border: 1px solid #ccc;\n        padding: 10px;\n    }\n\n    #modelInfoTable {\n        margin-top: 20px;\n    }\n</style>"],"mappings":"AAoDA,OAAAA,KAAA;AAEA;EACAC,KAAA;IACA;MACAC,IAAA;MACAC,QAAA;MACAC,IAAA;IACA;EACA;EACAC,OAAA;IACAC,iBAAA;MACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;IARA,CASA;IACAC,WAAA;MACA,IAAAC,aAAA;MACA,MAAAC,gBAAA,GAAAC,QAAA,CAAAC,iBAAA;MACA,SAAAC,CAAA,MAAAA,CAAA,GAAAH,gBAAA,CAAAI,MAAA,EAAAD,CAAA;QACA,IAAAH,gBAAA,CAAAG,CAAA,EAAAE,OAAA;UACAN,aAAA,GAAAC,gBAAA,CAAAG,CAAA,EAAAG,KAAA;UACA;QACA;MACA;MACA;;MAEA,MAAAC,OAAA,QAAAZ,IAAA,CAAAa,IAAA,CAAAC,IAAA,IAAAA,IAAA,CAAAhB,IAAA,KAAAM,aAAA;MACAW,OAAA,CAAAC,GAAA,CAAAJ,OAAA;MAEA,KAAAK,MAAA,CAAAC,MAAA;QACAC,UAAA,EAAAP,OAAA,CAAAQ,WAAA;QACAC,SAAA,EAAAT,OAAA,CAAAd,IAAA;QACAwB,WAAA,EAAAV,OAAA,CAAAW,YAAA;QACAC,eAAA,EAAAZ,OAAA,CAAAa;MACA;MAEAV,OAAA,CAAAC,GAAA,MAAAC,MAAA,CAAAS,KAAA;MAGA9B,KAAA;QACA+B,GAAA;QACAC,MAAA;QACA/B,IAAA,OAAAoB,MAAA,CAAAS,KAAA,CAAAG;MAEA,GAAAC,IAAA,CAAAC,MAAA;QACAhB,OAAA,CAAAC,GAAA,CAAAe,MAAA;MACA,GAAAC,KAAA,CAAAC,GAAA;QACAlB,OAAA,CAAAC,GAAA,CAAAiB,GAAA;MACA;IAGA;EACA;EACAC,QAAA;IAEAtC,KAAA;MACA+B,GAAA;IACA,GAAAG,IAAA,CAAAC,MAAA;MACA,KAAA/B,IAAA,GAAAmC,IAAA,CAAAC,KAAA,CAAAL,MAAA,CAAAlC,IAAA,CAAAA,IAAA,EAAAA,IAAA,CAAAG,IAAA;MACAe,OAAA,CAAAC,GAAA,MAAAhB,IAAA;IAEA,GAAAgC,KAAA,CAAAC,GAAA;MACAlB,OAAA,CAAAC,GAAA,CAAAiB,GAAA;IACA;EACA;AACA"},"metadata":{},"sourceType":"module","externalDependencies":[]}