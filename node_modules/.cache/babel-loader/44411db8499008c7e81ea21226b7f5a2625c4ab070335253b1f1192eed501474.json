{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.url-search-params.delete.js\";\nimport \"core-js/modules/web.url-search-params.has.js\";\nimport \"core-js/modules/web.url-search-params.size.js\";\nimport request from \"@/utils/request\";\nimport { computed } from \"vue\";\nexport default {\n  name: 'TranscriptionView',\n  data() {\n    return {\n      results: [],\n      eaf_filepath: '',\n      audio_filepath: \"\",\n      eaf_content: \"\",\n      eaf_name: \"\"\n    };\n  },\n  methods: {\n    get_EAF() {\n      request.get(\"/transcribe/result/elan\").then(res => {\n        const result = JSON.parse(res.data).data.elan;\n        // console.log(result);\n        this.eaf_content = result;\n        this.results = this.parseEAF(result);\n      });\n    },\n    // //Upload the eaf file\n    async loadEAF() {\n      try {\n        //use fetch to visit the eaf file\n        const response = await fetch(this.eaf_filepath);\n        if (!response.ok) {\n          throw new Error('Failed to load EAF file');\n        }\n        this.eaf_content = await response.text();\n        this.results = this.parseEAF(this.eaf_content);\n      } catch (error) {\n        console.error('Error loading EAF file:', error);\n      }\n    },\n    //explain the eaf file\n    parseEAF(eafContent) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(eafContent, 'application/xml');\n      const timeSlots = xmlDoc.getElementsByTagName('TIME_SLOT');\n      const annotations = xmlDoc.getElementsByTagName('ALIGNABLE_ANNOTATION');\n      const result = [];\n      const timeSlotMap = {};\n      for (let i = 0; i < timeSlots.length; i++) {\n        const timeSlot = timeSlots[i];\n        const id = timeSlot.getAttribute('TIME_SLOT_ID');\n        timeSlotMap[id] = timeSlot.getAttribute('TIME_VALUE');\n      }\n      for (let i = 0; i < annotations.length; i++) {\n        const annotation = annotations[i];\n        const id = annotation.getAttribute('ANNOTATION_ID');\n        const startId = annotation.getAttribute('TIME_SLOT_REF1');\n        const endId = annotation.getAttribute('TIME_SLOT_REF2');\n        const content = annotation.getElementsByTagName('ANNOTATION_VALUE')[0].textContent;\n        const start = timeSlotMap[startId] / 1000;\n        const end = timeSlotMap[endId] / 1000;\n        const isSelected = false;\n        const isEditing = false;\n        result.push({\n          id,\n          start,\n          end,\n          content,\n          isSelected,\n          isEditing\n        });\n      }\n\n      // 排序结果\n      result.sort((a, b) => a.start - b.start);\n      return result;\n    },\n    //update the eaf_content\n    updateAnnotationValue() {\n      const parser = new DOMParser();\n      // console.log(this.eaf_content)\n      const originalEAFContent = this.eaf_content;\n      const results = this.results;\n      const xmlDoc = parser.parseFromString(originalEAFContent, 'application/xml');\n      for (let i = 0; i < results.length; i++) {\n        const resultsItem = results[i];\n        const id = resultsItem.id;\n        const content = resultsItem.content;\n        const annotationElement = xmlDoc.querySelector(`[ANNOTATION_ID=\"${id}\"] ANNOTATION_VALUE`);\n        if (annotationElement) {\n          annotationElement.textContent = content;\n        }\n      }\n\n      // 将 xmlDoc 转换为字符串\n      this.eaf_content = new XMLSerializer().serializeToString(xmlDoc);\n      // console.log(updatedEAFContent);\n      this.downloadFile(this.eaf_name + '.eaf');\n    },\n    //download the eaf file\n    downloadFile(fileName) {\n      const updatedEAFContent = this.eaf_content;\n      const blob = new Blob([updatedEAFContent], {\n        type: 'text/xml'\n      });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    },\n    //add audio listener\n    handleTimeUpdate() {\n      const audioPlayer = this.$refs.audioPlayer;\n      const currentTime = audioPlayer.currentTime;\n      this.results.forEach(result => {\n        result.isSelected = currentTime >= result.start && currentTime < result.end;\n        // if (currentTime>=result.start&&currentTime<result.end){\n        //   result.isSelected=true;\n        // }else {\n        //   result.isSelected=false;\n        // }\n        this.scrollSelectedResultIntoView();\n      });\n    },\n    //The font position change method\n    scrollSelectedResultIntoView() {\n      const resultsContainer = this.$refs.resultsContainer;\n      const selectedResult = resultsContainer.querySelector('.selected-item');\n      if (selectedResult) {\n        // Use a smooth scroll behavior for a nicer effect\n        selectedResult.scrollIntoView({\n          behavior: 'smooth',\n          block: 'center'\n        });\n      }\n    },\n    //when the transcription font, the scroll will jump to right place\n    jumpScroll(result) {\n      // console.log(result.start);\n      const audioPlayer = this.$refs.audioPlayer;\n      audioPlayer.currentTime = result.start;\n      audioPlayer.play();\n      const timeUpdateHandler = () => {\n        if (audioPlayer.currentTime >= result.end) {\n          audioPlayer.pause();\n          audioPlayer.removeEventListener('timeupdate', timeUpdateHandler);\n        }\n      };\n      audioPlayer.addEventListener('timeupdate', timeUpdateHandler);\n    },\n    //upload the audio\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.audio_filepath = URL.createObjectURL(file);\n        this.$refs.audioPlayer.load();\n      }\n    },\n    //Edit the transcription content\n    editTranscription(result) {\n      this.$refs.audioPlayer.pause();\n      result.isEditing = true;\n    },\n    saveTranscription(result) {\n      result.isEditing = false;\n    },\n    audioUrl1() {\n      const file1 = this.$store.state.file.list;\n      console.log(this.$store.state.file.list);\n      const blob = new Blob([file1.raw], {\n        type: 'audio/wav'\n      });\n      this.eaf_name = file1.name.slice(0, -4);\n      this.audio_filepath = URL.createObjectURL(blob);\n    }\n  },\n  mounted() {\n    const audioPlayer = this.$refs.audioPlayer;\n    audioPlayer.addEventListener('timeupdate', this.handleTimeUpdate);\n    // this.loadEAF();\n    this.get_EAF();\n    this.audioUrl1();\n  },\n  beforeDestroy() {\n    //destroy the listener\n    const audioPlayer = this.$refs.audioPlayer;\n    audioPlayer.removeEventListener('timeupdate', this.handleTimeUpdate);\n  }\n};","map":{"version":3,"names":["request","computed","name","data","results","eaf_filepath","audio_filepath","eaf_content","eaf_name","methods","get_EAF","get","then","res","result","JSON","parse","elan","parseEAF","loadEAF","response","fetch","ok","Error","text","error","console","eafContent","parser","DOMParser","xmlDoc","parseFromString","timeSlots","getElementsByTagName","annotations","timeSlotMap","i","length","timeSlot","id","getAttribute","annotation","startId","endId","content","textContent","start","end","isSelected","isEditing","push","sort","a","b","updateAnnotationValue","originalEAFContent","resultsItem","annotationElement","querySelector","XMLSerializer","serializeToString","downloadFile","fileName","updatedEAFContent","blob","Blob","type","url","window","URL","createObjectURL","document","createElement","href","download","body","appendChild","click","removeChild","revokeObjectURL","handleTimeUpdate","audioPlayer","$refs","currentTime","forEach","scrollSelectedResultIntoView","resultsContainer","selectedResult","scrollIntoView","behavior","block","jumpScroll","play","timeUpdateHandler","pause","removeEventListener","addEventListener","handleFileChange","event","file","target","files","load","editTranscription","saveTranscription","audioUrl1","file1","$store","state","list","log","raw","slice","mounted","beforeDestroy"],"sources":["src/views/Result.vue"],"sourcesContent":["<template>\n    <div>\n        <div>\n            <div style=\"text-align: left;margin-left: 10px\">\n                <input type=\"file\" @change=\"handleFileChange\">\n                <audio controls id=\"myAudio\" ref=\"audioPlayer\">\n<!--                  <source :src=\"audioUrl\" type=\"audio/wav\">-->\n                  <source :src=\"this.audio_filepath\" type=\"audio/wav\">\n<!--                  {{$store.state.file.list[0]}}-->\n                </audio>\n\n<!--                        <audio controls id=\"myAudio\" ref=\"audioPlayer\">-->\n<!--                          <source :src=\"audioUrl\" type=\"audio/wav\">-->\n<!--&lt;!&ndash;                          <source src=\"@/assets/20170726-AK-005.wav\" type=\"audio/wav\">&ndash;&gt;-->\n<!--                        </audio>-->\n            </div>\n            <!--      <div style=\"text-align: left;margin-left: 10px\">-->\n            <!--&lt;!&ndash;        <button @click=\"loadEAF\">加载EAF文件</button>&ndash;&gt;-->\n            <!--        <input type=\"file\" @change=\"readEAFContent\" accept=\".eaf, application/xml\">-->\n            <!--      </div>-->\n        </div>\n\n        <div id=\"results-container\" style=\"text-align: left\" ref=\"resultsContainer\">\n            <div v-for=\"result in results\" :key=\"result.id\" :class=\"{'selected-item':result.isSelected}\" :id=\"result.id\">\n                <div class=\"result-container\" v-if=\"!result.isEditing\">\n                    <div class=\"edit_font\" >\n                        <el-button icon=\"el-icon-video-play\" style=\"margin-right: 10px;\" size=\"mini\" circle @click=\"jumpScroll(result)\"/>\n                        <a>{{ result.content }}</a>\n                    </div>\n                    <div class=\"edit_button\" :class=\"{'selected_edit_button':result.isSelected}\">\n                        <el-button type=\"primary\" icon=\"el-icon-edit\" size=\"mini\" circle @click=\"editTranscription(result)\"></el-button>\n                    </div>\n                </div>\n                <div v-if=\"result.isEditing\" class=\"edit-container\">\n                    <div style=\"margin-left: 10px;margin-top: 1px\">\n                        <!--            <input type=\"text\" :value=\"result.content\">-->\n                        <el-input type=\"text\" v-model=\"result.content\"></el-input>\n                    </div>\n                    <div class=\"save_button\">\n                        <el-button type=\"success\" icon=\"el-icon-check\" size=\"mini\" circle @click=\"saveTranscription(result)\"></el-button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        <div>\n            <!--      <button @click=\"get_EAF()\">Get the eaf path</button>-->\n            <el-button type=\"primary\" plain @click=\"updateAnnotationValue()\" style=\"margin-left: 10px\">Save and Download</el-button>\n        </div>\n\n    </div>\n</template>\n\n\n<script>\n\nimport request from \"@/utils/request\";\nimport {computed} from \"vue\";\n\nexport default {\n  name: 'TranscriptionView',\n  data() {\n    return {\n      results: [],\n      eaf_filepath:'',\n      audio_filepath:\"\",\n      eaf_content:\"\",\n      eaf_name:\"\"\n    }\n  },\n  methods:{\n    get_EAF(){\n      request.get(\"/transcribe/result/elan\").then(res => {\n        const result=JSON.parse(res.data).data.elan;\n        // console.log(result);\n        this.eaf_content=result\n        this.results=this.parseEAF(result);\n      })\n    },\n\n    // //Upload the eaf file\n    async loadEAF() {\n      try {\n\n        //use fetch to visit the eaf file\n        const response = await fetch(this.eaf_filepath);\n\n\n        if (!response.ok) {\n          throw new Error('Failed to load EAF file');\n        }\n        this.eaf_content = await response.text();\n\n        this.results=this.parseEAF(this.eaf_content);\n      } catch (error) {\n        console.error('Error loading EAF file:', error);\n      }\n    },\n\n    //explain the eaf file\n    parseEAF(eafContent) {\n      const parser = new DOMParser();\n      const xmlDoc = parser.parseFromString(eafContent, 'application/xml');\n\n      const timeSlots = xmlDoc.getElementsByTagName('TIME_SLOT');\n      const annotations = xmlDoc.getElementsByTagName('ALIGNABLE_ANNOTATION');\n\n      const result = [];\n\n\n      const timeSlotMap = {};\n      for (let i = 0; i < timeSlots.length; i++) {\n        const timeSlot = timeSlots[i];\n        const id = timeSlot.getAttribute('TIME_SLOT_ID');\n        timeSlotMap[id] = timeSlot.getAttribute('TIME_VALUE');\n      }\n\n\n      for (let i = 0; i < annotations.length; i++) {\n        const annotation = annotations[i];\n        const id = annotation.getAttribute('ANNOTATION_ID');\n        const startId = annotation.getAttribute('TIME_SLOT_REF1');\n        const endId = annotation.getAttribute('TIME_SLOT_REF2');\n        const content = annotation.getElementsByTagName('ANNOTATION_VALUE')[0].textContent;\n\n        const start = timeSlotMap[startId] / 1000;\n        const end = timeSlotMap[endId] / 1000;\n        const isSelected=false;\n        const isEditing=false;\n\n        result.push({\n          id,\n          start,\n          end,\n          content,\n          isSelected,\n          isEditing\n        });\n      }\n\n      // 排序结果\n      result.sort((a, b) => a.start - b.start);\n\n      return result;\n    },\n\n\n    //update the eaf_content\n    updateAnnotationValue() {\n      const parser = new DOMParser();\n      // console.log(this.eaf_content)\n      const originalEAFContent=this.eaf_content;\n      const results=this.results;\n\n      const xmlDoc = parser.parseFromString(originalEAFContent, 'application/xml');\n\n      for (let i = 0; i < results.length; i++) {\n        const resultsItem = results[i];\n        const id = resultsItem.id;\n        const content = resultsItem.content;\n\n        const annotationElement = xmlDoc.querySelector(`[ANNOTATION_ID=\"${id}\"] ANNOTATION_VALUE`);\n        if (annotationElement) {\n\n          annotationElement.textContent = content;\n        }\n      }\n\n      // 将 xmlDoc 转换为字符串\n      this.eaf_content = new XMLSerializer().serializeToString(xmlDoc);\n      // console.log(updatedEAFContent);\n      this.downloadFile(this.eaf_name+'.eaf');\n    },\n\n    //download the eaf file\n    downloadFile(fileName) {\n      const updatedEAFContent=this.eaf_content;\n      const blob = new Blob([updatedEAFContent], { type: 'text/xml' });\n      const url = window.URL.createObjectURL(blob);\n      const a = document.createElement('a');\n      a.href = url;\n      a.download = fileName;\n      document.body.appendChild(a);\n      a.click();\n      document.body.removeChild(a);\n      window.URL.revokeObjectURL(url);\n    },\n\n\n    //add audio listener\n    handleTimeUpdate() {\n      const audioPlayer = this.$refs.audioPlayer;\n      const currentTime = audioPlayer.currentTime;\n\n      this.results.forEach((result)=>{\n        result.isSelected = currentTime >= result.start && currentTime < result.end;\n        // if (currentTime>=result.start&&currentTime<result.end){\n        //   result.isSelected=true;\n        // }else {\n        //   result.isSelected=false;\n        // }\n        this.scrollSelectedResultIntoView();\n      })\n    },\n\n    //The font position change method\n    scrollSelectedResultIntoView() {\n      const resultsContainer = this.$refs.resultsContainer;\n      const selectedResult = resultsContainer.querySelector('.selected-item');\n\n      if (selectedResult) {\n        // Use a smooth scroll behavior for a nicer effect\n        selectedResult.scrollIntoView({ behavior: 'smooth', block: 'center' });\n      }\n    },\n\n    //when the transcription font, the scroll will jump to right place\n    jumpScroll(result){\n      // console.log(result.start);\n      const audioPlayer = this.$refs.audioPlayer;\n      audioPlayer.currentTime=result.start;\n      audioPlayer.play();\n      const timeUpdateHandler=()=>{\n        if (audioPlayer.currentTime >= result.end){\n          audioPlayer.pause();\n          audioPlayer.removeEventListener('timeupdate', timeUpdateHandler);\n        }\n      };\n      audioPlayer.addEventListener('timeupdate', timeUpdateHandler);\n    },\n\n\n    //upload the audio\n    handleFileChange(event) {\n      const file = event.target.files[0];\n      if (file) {\n        this.audio_filepath = URL.createObjectURL(file);\n        this.$refs.audioPlayer.load();\n      }\n    },\n\n    //Edit the transcription content\n    editTranscription(result){\n      this.$refs.audioPlayer.pause();\n      result.isEditing=true\n\n    },\n    saveTranscription(result){\n\n      result.isEditing=false\n    },\n    audioUrl1(){\n      const file1=this.$store.state.file.list;\n      console.log(this.$store.state.file.list)\n      const blob =new Blob([file1.raw], { type: 'audio/wav' });\n      this.eaf_name=file1.name.slice(0,-4);\n\n      this.audio_filepath=URL.createObjectURL(blob);\n    }\n\n  },\n  mounted() {\n    const audioPlayer = this.$refs.audioPlayer;\n    audioPlayer.addEventListener('timeupdate', this.handleTimeUpdate);\n    // this.loadEAF();\n    this.get_EAF();\n    this.audioUrl1()\n\n  },\n  beforeDestroy() {\n\n    //destroy the listener\n    const audioPlayer = this.$refs.audioPlayer;\n    audioPlayer.removeEventListener('timeupdate', this.handleTimeUpdate);\n  },\n}\n\n</script>\n\n\n\n<style scoped>\n  .selected-item{\n    background-color: #cccccc;\n    color: red;\n  }\n  .result-container{\n    display: flex;\n    align-items: center;\n    margin-top: 3px;\n  }\n  .edit_font{\n    margin-left: 10px;\n  }\n  .edit-font a{\n    font-family: 'Arial', sans-serif;\n  }\n  .edit_button{\n    margin-left: auto;\n    margin-right: 10px;\n    opacity: 0;\n    transition: opacity 0.3s ease;\n  }\n  .edit_button:hover{\n    opacity: 1;\n  }\n  .selected_edit_button{\n    opacity: 1;\n  }\n\n  .edit-container{\n    display: flex;\n    align-items: center;\n    margin-top: 3px;\n  }\n\n  .save_button{\n    margin-left: auto;\n    margin-right: 10px;\n  }\n\n\n\n  #results-container{\n    margin-left: 20px;\n    width: 450px;\n    max-height: 400px;\n    overflow-y: auto;\n    background-color: antiquewhite;\n  }\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}