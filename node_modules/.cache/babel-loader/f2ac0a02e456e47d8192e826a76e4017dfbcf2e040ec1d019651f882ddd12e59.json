{"ast":null,"code":"import Request from \"@/utils/request\";\nexport default {\n  name: \"Upload\",\n  data() {\n    return {\n      fileList: [],\n      disabledValue: false,\n      isDataReceived: false\n    };\n  },\n  methods: {\n    checkModel2() {\n      if (this.$store.state.model.engineName === 'kaldi') this.checkIfFinishKaldi();else this.checkIfFinishHFT();\n      this.disabledValue = false;\n    },\n    checkIfFinishHFT() {\n      // 设置isDataReceived为false，表示请求已开始但尚未接收响应\n      this.isDataReceived = true;\n\n      // 调用后端接口\n      Request.get('/hft/transcribe2').then(res => {\n        let parsedData = JSON.parse(res.data);\n        let statusCode = parsedData.status;\n        console.log('Status:', statusCode);\n\n        // 检查状态是否为200\n        if (statusCode === 200) {\n          this.$message({\n            message: 'Transcription completed!',\n            type: 'success'\n          });\n        } else {\n          this.$message({\n            message: 'Status is not 200.',\n            type: 'error'\n          });\n        }\n\n        // 设置isDataReceived为true，表示已接收到响应\n        this.isDataReceived = false;\n      }).catch(error => {\n        console.log('Check error:', error); // for debug\n        this.$message({\n          message: 'Failed to check: ' + error,\n          type: 'error'\n        });\n\n        // 如果希望错误响应也将isDataReceived设置为true，可以在此处再次设置\n        // this.isDataReceived = true;\n      });\n    },\n\n    checkIfFinishKaldi() {\n      // 设置isDataReceived为false，表示请求已开始但尚未接收响应\n      this.isDataReceived = true;\n\n      // 调用后端接口\n      Request.get('/kaldi/transcribe2').then(res => {\n        let parsedData = JSON.parse(res.data);\n        let statusCode = parsedData.status;\n        console.log('Status:', statusCode);\n\n        // 检查状态是否为200\n        if (statusCode === 200) {\n          this.$message({\n            message: 'Transcription completed!',\n            type: 'success'\n          });\n        } else {\n          this.$message({\n            message: 'Status is not 200.',\n            type: 'error'\n          });\n        }\n\n        // 设置isDataReceived为true，表示已接收到响应\n        this.isDataReceived = false;\n      }).catch(error => {\n        console.log('Check error:', error); // for debug\n        this.$message({\n          message: 'Failed to check: ' + error,\n          type: 'error'\n        });\n\n        // 如果希望错误响应也将isDataReceived设置为true，可以在此处再次设置\n        // this.isDataReceived = true;\n      });\n    },\n\n    checkModel1() {\n      console.log(this.$store.state.model.engineName);\n      if (this.$store.state.model.engineName === 'kaldi') this.submitUploadKaldi();else this.submitUploadHFT();\n      this.disabledValue = true;\n    },\n    submitUploadKaldi() {\n      const formData = new FormData();\n\n      // Append each file from fileList to the formData\n      this.fileList.forEach(file => {\n        formData.append('file', file.raw); // 'file' is the field name. Adjust based on backend requirements.\n      });\n\n      const options = {\n        url: '/kaldi/upload2',\n        method: 'post',\n        data: formData,\n        transformRequest: [function (data, headers) {\n          // Remove the default 'Content-Type' for post requests\n          delete headers['Content-Type'];\n          return data;\n        }]\n      };\n\n      // Send the request using your custom request object\n      Request(options).then(res => {\n        let parsedData = JSON.parse(res.data); // Assuming the response is a string that needs parsing.\n        let statusCode = parsedData.status; // Adjust based on your backend's response structure.\n\n        if (statusCode === 200) {\n          this.$message({\n            message: 'Upload success!',\n            type: 'success'\n          });\n        } else {\n          this.$message({\n            message: 'Status is not 200.',\n            type: 'error'\n          });\n        }\n      }).catch(error => {\n        console.log('Upload error:', error);\n        this.$message({\n          message: 'Upload failed: ' + error,\n          type: 'error'\n        });\n      });\n    },\n    submitUploadHFT() {\n      const formData = new FormData();\n\n      // Append each file from fileList to the formData\n      this.fileList.forEach(file => {\n        formData.append('file', file.raw); // 'file' is the field name. Adjust based on backend requirements.\n      });\n\n      const options = {\n        url: '/hft/upload2',\n        method: 'post',\n        data: formData,\n        transformRequest: [function (data, headers) {\n          // Remove the default 'Content-Type' for post requests\n          delete headers['Content-Type'];\n          return data;\n        }]\n      };\n\n      // Send the request using your custom request object\n      Request(options).then(res => {\n        let parsedData = JSON.parse(res.data); // Assuming the response is a string that needs parsing.\n        let statusCode = parsedData.status; // Adjust based on your backend's response structure.\n\n        if (statusCode === 200) {\n          this.$message({\n            message: 'Upload success!',\n            type: 'success'\n          });\n        } else {\n          this.$message({\n            message: 'Status is not 200.',\n            type: 'error'\n          });\n        }\n      }).catch(error => {\n        console.log('Upload error:', error);\n        this.$message({\n          message: 'Upload failed: ' + error,\n          type: 'error'\n        });\n      });\n    },\n    handleRemove(file, fileList) {\n      console.log(file, fileList);\n    },\n    handlePreview(file) {\n      console.log(file);\n    },\n    handleChange(file, fileList) {\n      this.fileList = [...fileList];\n    }\n  }\n};","map":{"version":3,"names":["Request","name","data","fileList","disabledValue","isDataReceived","methods","checkModel2","$store","state","model","engineName","checkIfFinishKaldi","checkIfFinishHFT","get","then","res","parsedData","JSON","parse","statusCode","status","console","log","$message","message","type","catch","error","checkModel1","submitUploadKaldi","submitUploadHFT","formData","FormData","forEach","file","append","raw","options","url","method","transformRequest","headers","handleRemove","handlePreview","handleChange"],"sources":["src/views/Upload.vue"],"sourcesContent":["<template>\n  <el-upload\n      class=\"upload-demo\"\n      ref=\"upload\"\n      action=\"https://localhost:8091\"\n      :on-preview=\"handlePreview\"\n      :on-remove=\"handleRemove\"\n      :on-change=\"handleChange\"\n      :file-list=\"fileList\"\n      :auto-upload=\"false\">\n    <el-button slot=\"trigger\" size=\"small\" type=\"primary\">Select file</el-button>\n    <el-button style=\"margin-left: 10px;\" size=\"small\" type=\"success\" @click=\"checkModel1\" :disabled=\"this.disabledValue\">upload to Elpis</el-button>\n    <el-button style=\"margin-left: 10px;\" size=\"small\" type=\"success\" @click=\"checkModel2\" :loading=\"this.isDataReceived\">start</el-button>\n  </el-upload>\n</template>\n\n<script>\nimport Request from \"@/utils/request\";\n\nexport default {\n  name: \"Upload\",\n  data() {\n    return {\n      fileList: [],\n      disabledValue: false,\n      isDataReceived: false\n    }\n  },\n  methods: {\n    checkModel2(){\n      if(this.$store.state.model.engineName === 'kaldi')\n        this.checkIfFinishKaldi();\n      else\n        this.checkIfFinishHFT();\n      this.disabledValue = false;\n    },\n    checkIfFinishHFT() {\n      // 设置isDataReceived为false，表示请求已开始但尚未接收响应\n      this.isDataReceived = true;\n\n      // 调用后端接口\n      Request.get('/hft/transcribe2')\n          .then(res => {\n            let parsedData = JSON.parse(res.data);\n            let statusCode = parsedData.status;\n            console.log('Status:', statusCode);\n\n            // 检查状态是否为200\n            if (statusCode === 200) {\n              this.$message({ message: 'Transcription completed!', type: 'success' });\n            } else {\n              this.$message({ message: 'Status is not 200.', type: 'error' });\n            }\n\n            // 设置isDataReceived为true，表示已接收到响应\n            this.isDataReceived = false;\n          })\n          .catch(error => {\n            console.log('Check error:', error); // for debug\n            this.$message({ message: 'Failed to check: ' + error, type: 'error' });\n\n            // 如果希望错误响应也将isDataReceived设置为true，可以在此处再次设置\n            // this.isDataReceived = true;\n          });\n    },\n    checkIfFinishKaldi() {\n      // 设置isDataReceived为false，表示请求已开始但尚未接收响应\n      this.isDataReceived = true;\n\n      // 调用后端接口\n      Request.get('/kaldi/transcribe2')\n          .then(res => {\n            let parsedData = JSON.parse(res.data);\n            let statusCode = parsedData.status;\n            console.log('Status:', statusCode);\n\n            // 检查状态是否为200\n            if (statusCode === 200) {\n              this.$message({ message: 'Transcription completed!', type: 'success' });\n            } else {\n              this.$message({ message: 'Status is not 200.', type: 'error' });\n            }\n\n            // 设置isDataReceived为true，表示已接收到响应\n            this.isDataReceived = false;\n          })\n          .catch(error => {\n            console.log('Check error:', error); // for debug\n            this.$message({ message: 'Failed to check: ' + error, type: 'error' });\n\n            // 如果希望错误响应也将isDataReceived设置为true，可以在此处再次设置\n            // this.isDataReceived = true;\n          });\n    },\n    checkModel1(){\n      console.log(this.$store.state.model.engineName)\n      if(this.$store.state.model.engineName === 'kaldi')\n        this.submitUploadKaldi();\n      else\n        this.submitUploadHFT();\n\n      this.disabledValue = true;\n    },\n    submitUploadKaldi() {\n      const formData = new FormData();\n\n      // Append each file from fileList to the formData\n      this.fileList.forEach(file => {\n        formData.append('file', file.raw);  // 'file' is the field name. Adjust based on backend requirements.\n      });\n\n      const options = {\n        url: '/kaldi/upload2',\n        method: 'post',\n        data: formData,\n        transformRequest: [function (data, headers) {\n          // Remove the default 'Content-Type' for post requests\n          delete headers['Content-Type'];\n          return data;\n        }]\n      };\n\n      // Send the request using your custom request object\n      Request(options)\n          .then(res => {\n            let parsedData = JSON.parse(res.data); // Assuming the response is a string that needs parsing.\n            let statusCode = parsedData.status;   // Adjust based on your backend's response structure.\n\n            if (statusCode === 200) {\n              this.$message({message: 'Upload success!', type: 'success'});\n            } else {\n              this.$message({message: 'Status is not 200.', type: 'error'});\n            }\n          })\n          .catch(error => {\n            console.log('Upload error:', error);\n            this.$message({message: 'Upload failed: ' + error, type: 'error'});\n          });\n    },\n    submitUploadHFT() {\n      const formData = new FormData();\n\n      // Append each file from fileList to the formData\n      this.fileList.forEach(file => {\n        formData.append('file', file.raw);  // 'file' is the field name. Adjust based on backend requirements.\n      });\n\n      const options = {\n        url: '/hft/upload2',\n        method: 'post',\n        data: formData,\n        transformRequest: [function (data, headers) {\n          // Remove the default 'Content-Type' for post requests\n          delete headers['Content-Type'];\n          return data;\n        }]\n      };\n\n      // Send the request using your custom request object\n      Request(options)\n          .then(res => {\n            let parsedData = JSON.parse(res.data); // Assuming the response is a string that needs parsing.\n            let statusCode = parsedData.status;   // Adjust based on your backend's response structure.\n\n            if (statusCode === 200) {\n              this.$message({message: 'Upload success!', type: 'success'});\n            } else {\n              this.$message({message: 'Status is not 200.', type: 'error'});\n            }\n          })\n          .catch(error => {\n            console.log('Upload error:', error);\n            this.$message({message: 'Upload failed: ' + error, type: 'error'});\n          });\n    },\n    handleRemove(file, fileList) {\n      console.log(file, fileList);\n    },\n    handlePreview(file) {\n      console.log(file);\n    },\n    handleChange(file, fileList) {\n      this.fileList = [...fileList];\n    }\n  }\n}\n</script>\n\n<style scoped>\n\n</style>"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}